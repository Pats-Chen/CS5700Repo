#! /usr/bin/env python3

import socket
import argparse
import ssl


def calculation(tokens):
    """
    Convert the string list into two stacks. Call evaluate(num_2, num_1, operator) to obtain the output and return it.
    
    Arguments:
    tokens -- a string list that contains integers and arithmetic operators in string format.
    """
    op_stack = []
    num_stack = []
    for token in tokens:
        try:
            int(token)
            num_stack.append(token)
        except ValueError:
            if token == '(':
                op_stack.append(token)
            elif token == ')':
                while len(op_stack) != 0 and op_stack[-1] != '(':
                    output = evaluate(num_stack.pop(), num_stack.pop(), op_stack.pop())
                if output == "error":
                    return "error"
                else:
                    num_stack.append(output)
                op_stack.pop()
            else:
                op_stack.append(token)
    return num_stack.pop()


def evaluate(num_b, num_a, operator):
    """
    Evaluate a pair of numbers and one operator in string format to obtain the arithmetic output and return it.
    If there is a ZeroDivisionError, return it in string format instead.
    
    Arguments:
    num_a -- the number on the left hand side of the operator.
    num_b -- the number on the right hand side of the operator.
    operator -- the arithmetic operator in the between of the two numbers, i.e., num_a operator num_b = output.
    """
    number_a = int(num_a)
    number_b = int(num_b)
    output = 0
    if (operator == '+' or operator == '-' or operator == '*' or
            operator == "//" or operator == "<<^"):
        try:
            if operator == '+':
                output = number_a + number_b
            elif operator == '-':
                output = number_a - number_b
            elif operator == '*':
                output = number_a * number_b
            elif operator == "//":
                output = number_a // number_b
            else:
                output = (number_a << 13) ^ number_b
        except ZeroDivisionError:
            return "ZeroDivisionError"
    return str(output)


def send_hello(my_socket, user_name):
    """
    Send a hello message in byte format to the server using a given socket instance and a corresponding user name.
    Nothing should be return after the function call.
    
    Arguments:
    my_socket -- the socket instance used to build the connection with the server.
    user_name -- the user name to be used for the identity of the hello message.
    """
    my_socket.send("cs5700fall2022 HELLO {username}\n".format(username=user_name).encode(encoding="utf-8"))


def send_error(my_socket):
    """
    Send an error message in byte format to the server using a given socket when encountering a ZeroDivisionError.
    Nothing should be return after the function call.
    
    Arguments:
    my_socket -- the socket instance used to build the connection with the server.
    """
    my_socket.send("cs5700fall2022 ERR #DIV/0\n".encode(encoding="utf-8"))


def send_result(my_socket, result):
    """
    Send a message with the calculation result in byte format to the server using a given socket after the calculation function call.
    Nothing should be return after the function call.
    
    Arguments:
    my_socket -- the socket instance used to build the connection with the server.
    result -- the calculation result obtained by calling the calculation function.
    """
    result_message = "cs5700fall2022 STATUS {output}\n".format(output=result)
    my_socket.send(result_message.encode(encoding="utf-8"))


def main():
    """
    Handle all other processes of the client script, including a commandline interface, the creation of the socket connection,
    the communication process with the server, and printing out the secret_flag obtained.
    This function will be called first when the client script is executed.
    Nothing should be return after the function call.
    """
    parser = argparse.ArgumentParser(description="CS5700 Project 1")
    # initiate a parser for the commandline command
    parser.add_argument("--port", "-p", type=int, default=27995)
    # 27995 is the default port for the client.
    parser.add_argument("--secure", "-s", required=True, action="store_true")
    parser.add_argument("hostname", nargs=1)
    parser.add_argument("username", nargs=1)
    args = parser.parse_args()
    # args contains a list of all arguments of the commandline command

    context_instance = ssl.create_default_context()
    my_socket = socket.create_connection((args.hostname[0], args.port))
    my_ssocket = context_instance.wrap_socket(my_socket, server_hostname=args.hostname[0])
    # another way to close the connection automatically after the communication
    # with  as my_socket:
    #     with context_instance.wrap_socket(my_socket, server_hostname=args.hostname[0]) as my_ssocket:
    #         print(my_ssocket.version())
    send_hello(my_ssocket, args.username[0])

    full_message = ''
    empty_flag = False
    while "BYE" not in full_message:
        full_message = ''
        while "\n" not in full_message:
            message = my_ssocket.recv(4096).decode("utf-8")
            # socket.recv() receives the message. there is an argument for the size of each data chunk.
            if message == '':
                empty_flag = True
                break
            full_message += message
        if empty_flag:
            break
        if "BYE" in full_message:
            break
        head, mid, tail = full_message.partition("\n")
        full_message = head
        my_expression = full_message.split(' ')
        my_calculation = my_expression[2:]
        result = calculation(my_calculation)
        if result == "ZeroDivisionError":
            send_error(my_ssocket)
        else:
            send_result(my_ssocket, result)
    print(full_message.split(' ')[2])
    my_ssocket.close()


if __name__ == "__main__":
    main()
